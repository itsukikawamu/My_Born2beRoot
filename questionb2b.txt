・仮想化の目的と仕組みは？
リソースの効率、コスト削減、柔軟性、俊敏性、分離性、安全性、移動性
・Virtual Boxとは？
ホストOSの上で動くハイパーバイザ。物理リソースへのアクセスを仲介
・OSとは？
ハードウェア資源の管理、ファイルシステムの提供、プロセス管理→カーネル
UIの提供→シェル

・DebianとRockyの違いは？
-Debian
世界中の有志によって運営されるGNU/Linuxディストリビューション。汎用的な環境を提供する完全フリーOS。Debian社会契約及びDFSGを掲げる。後継にUbuntuなど。
-Rocky
OSSであるRHELの一部のソースコードを用いた所謂Red Hat系。商業品質の企業向けOS。CentOSの後継。Rocky社が開発している。
・aptとaptitiudeの違いは？
そもそもパッケージとは、ソフトウェアをアーカイブ化したものでソフトの名前やバージョン、依存関係などのメタデータを含んだもの
パッケージ管理システムとは、コンピュータプログラムのインストール、アップグレード、設定、アンインストールのプロセスを一貫した方法で自動化するシステムで、手動でのインストールやアップグレードの必要性を排除するように設計されている。通常、数百あるいは数万の個別のソフトウェアパッケージで構成されるオペレーティングシステムを持つ大企業にとって、これは特に便利
そもそもdpkgとは、Debian系のバイナリパッケージである.debファイルを扱う、Debian系のパッケージ管理システムのベースとなるソフトウェア。
APT(Advanced Packaging Tool)とは、dpkgを用いた上位のパッケージ管理システムで、APTでは、コンパイル済みパッケージ（バイナリパッケージと呼ぶ）同士の関係を主に下の4つにわけて管理する。これらの関係を用いて、目的のパッケージをインストールするために必要なパッケージもしくは削除する必要があるパッケージを自動計算する。
依存
パッケージを導入するのに欠かすことのできないパッケージ。
推奨
無くてもよいが、プログラムの機能を利用するために通常は導入するパッケージ。
提案
無くてもよいが、導入することによってプログラムの機能を向上させるパッケージ。
衝突
パッケージを導入することで、同一の機能を有するなどの理由で削除されるパッケージ。
aptコマンドでは、依存と推奨は自動的にインストールされ衝突は自動でアンインストールされる。aptitudeコマンドを引数なしで実行するとTUIによって提案関係にあるパッケージの有無を選択できたり、衝突した際の解消方法を選択したりできる。


・AppArmorとは？
強制アクセス制御というセキュリティ機能
従来のLinuxのパーミッション(DAC)と強制アクセス制御(MAC)の違いは、
DACでは対象をユーザーごとに権限を設定、
ファイルの所有者も変更できる。
MACでは対象をプログラムごとに権限を設定、
管理者のみが変更できる。
Debian系のAppArmorはパス名で、
RH系のSELinuxではSELinuxコンテキストでプログラムを指定。(ラベルを設定するため詳細, ls -Z)


・SSHとは？仕組みは？なぜrootへのログインを制限する？
SSH(secure shell)とは、リモートホストのシェルを安全に操作するためのアプリケーション層のネットワークプロトコル。
暗号化と認証
-暗号化
鍵交換アルゴリズム等で共通鍵を生成し、共通鍵暗号方式で通信
-認証
パスワード認証方式と公開鍵認証方式がある
公開鍵認証方式
リモートホストがあらかじめ渡したはずのクライアントの公開鍵を持ってるかどうか→ホスト認証
公開鍵で暗号化した内容をクライアントが自身の秘密鍵で復号できるか→クライアント認証 
そもそもrootにログインすること自体非推奨。
全部sudoにしたほうがログが残る


・Fire Wallとは？
ネットワークの安全の為に通信を制御するシステム。内部から外部、外部から内部どちらも制御可
IPアドレスやポート番号で通過して良いパケットを指定するものをパケットフィルタ型という
プロキシサーバ等で通信の中身まで解析し制御するものをアプリケーションゲートウェイ型という

・UFWとは？仕組みは？
Uncomplicated FireWallはDebian系で利用されるファイアウォール管理ソフト。iptablesを内部にもつ
iptablesのような細かいコマンドによる制御が不要で簡単。そのかわりざっくり。

・ホストネームとは？
ネットワーク機器につける名前。IPアドレスでも特定は可能だが、人間に覚えやすく、ドメイン名をつけることで階層的に管理もできる

・パスワードとは？
認証のためにIDとセットで用いる合言葉

・グループとは？
複数のユーザーの権限を一括で設定できる

・パスワードポリシーとは？複雑性と有効期限の目的は？
セキュリティの確保を目的に設定する、使用できるパスワードの規則や制限。
複雑性は総当たり攻撃や辞書攻撃対策を目的
有効期限は漏洩した場合の影響を限定する目的

・sudoとは？sudo groupの制限の目的は？
常時rootでいることは危険なので必要な時だけsudoを使うようにする。
sudo経由の操作はログに残るので誰が何をしたか分かる。
ユーザーだけでなく操作を限定することもできる

・シェルとは？bashとは？
OSのインターフェイス。
コマンドを解釈してカーネルに指示を与える。
bashとはbourne again shellでshの後継。
スクリプト言語として標準になっている

・シェルスクリプトとは？バナーの意図は？
CLIで実行可能な一連のコマンドをファイルにして再利用可能にしたもの。プログラミング言語のような制御構文を持つが、中規模以上のプログラミングには不向き

・今回表示する情報たちの用途は？
シェルスクリプトで実行し→シンプルで軽量
すべての端末に→管理者がログインしなくてよい
10分おきに表示→トラブルの早期発見のため
内容：
OSのアーキテクチャとカーネルバージョン→システムの基本構成
物理プロセッサの数→物理コアに依存する処理（例：スレッド数制限）の調整
仮想プロセッサの数→OSが利用可能な並列実行数
利用可能なRAMと使用率→メモリ不足による性能劣化の早期発見
利用可能なストレージと用率→空き容量不足はログ出力不能やアプリ停止の原因
CPUの使用率（%）→高負荷状態が続くと性能劣化や過熱による停止リスク
最後に再起動された日時→定期再起動、不正な再起動があったか確認
LVMが有効かどうか→柔軟なストレージ管理の可否を確認
現在のアクティブな接続数→攻撃の兆候を検出
サーバーを使用しているユーザー数→想定外のログインは不正アクセスの可能性
IPv4アドレスとMACアドレス→管理・監視・通信トラブルシューティング
sudoコマンドで実行されたコマンドの数→root権限の履歴はセキュリティ監査対象



・パーティションとは？LVMとは？仕組みは？
バックアップや復元の柔軟性。
パーティションが破損した際の影響を限定する
例:varファイルが大量に書き込まれても他のファイルの容量まで食わない
ディスクの最初にパーティションテーブルが書き込まれ、パーティションの区切りを表している。
LVMとは？
物理ディスクを抽象化し、より柔軟に管理するための仕組み。
物理パーティションをPVにする
→PVをまとめてVGとする。VGはPEの集合である
→VGをLVに切り分けて論理パーティションとする


・ワードプレスとは？仕組みは？
オープンソースのCMS。phpのプログラムで、リクエストを元にDBとやり取りしてhtmlを返す。
非エンジニアで、htmlやDBの知識なくてもウェブサイトを管理できるのがcmsの利点。

・gitサーバーとは？自鯖を持つメリットは
そもそもgitとは、オープンソースの分散型VCS。
gitサーバーとは、複数人でgitを使い開発する際に中心となるリモートリポジトリを提供するサーバ。
自鯖を建てるメリットは、セキュリティ面、コスト面、インターネットにつながなくても使える、自由度、